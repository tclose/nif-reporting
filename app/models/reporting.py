from datetime import datetime
from sqlalchemy import orm
from app import db
from app.constants import (
    ACTION_STATUS, CONCLUSION, PATHOLOGICAL_FINDINGS, ACTION_NOTSTARTED,
    ACTION_NA)


class Report(db.Model):
    """
    A report entered by a radiologist

    Parameters
    ----------
    session_id : int (Session.id)
        The ID of the session the report is of
    reporter_id : int (User.id)
        The ID of the user (radiologist) who reported the findings
    conclusion : int (see constants.CONCLUSION)
        A code  specifying the severity of the pathology if any are present
    findings : str
        A description of the pathologies if present
    exported : bool
        Whether the report has been exported to file already
    modality : int (constants.MODALITIES)
        A code specifying the modality of the report (PET or MRI)
    filename : str
        For old reports generated by Nick F, Paul B or AXIS, this is the name
        of the file that was saved in FileMaker
    """

    __tablename__ = 'report'

    # Fields
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date())
    session_id = db.Column(
        db.Integer, db.ForeignKey('imgsession.id',
                                  name='fk_report_imgsession'), unique=True)
    reporter_id = db.Column(
        db.Integer, db.ForeignKey('user.id',
                                  name='fk_report_user'))
    conclusion = db.Column(db.Integer)
    findings = orm.deferred(db.Column(db.Text))
    exported = db.Column(db.Boolean)
    modality = db.Column(db.Integer)
    filename = db.Column(db.String(200))

    # Radiological report handling
    followup_notes = orm.deferred(db.Column(db.Text))
    ci_notified = db.Column(db.Boolean)
    action_completed = db.Column(db.Integer)

    # Relationships
    # session = db.relationship('ImgSession', backref='reports')
    reporter = db.relationship('User', backref='reports')
    used_scans = db.relationship('Scan', secondary='report_scan_assoc')

    def __init__(self, session, reporter, conclusion, findings,
                 used_scans, modality, exported=False,
                 date=None, filename=None, followup_notes=None,
                 ci_notified=None, action_completed=None):
        if date is None:
            date = datetime.today()
        self.session = session
        self.reporter = reporter
        self.findings = findings
        self.conclusion = conclusion
        self.used_scans = used_scans
        self.exported = exported
        self.date = date
        self.modality = modality
        self.filename = filename
        self.followup_notes = followup_notes
        self.ci_notified = ci_notified
        if action_completed is None:
            if conclusion in PATHOLOGICAL_FINDINGS:
                action_completed = ACTION_NOTSTARTED
            else:
                action_completed = ACTION_NA
        self.action_completed = action_completed

    @property
    def conclusion_str(self):
        return CONCLUSION[self.conclusion][0]

    @property
    def conclusion_desc(self):
        return CONCLUSION[self.conclusion][1]

    @property
    def date_str(self):
        return self.date.strftime('%d/%m/%Y')

    @property
    def ci_notification_status_str(self):
        return ACTION_STATUS[self.ci_notification_status]


    def __str__(self):
        return str(self.session_id)


report_scan_assoc = db.Table(
    'report_scan_assoc', db.Model.metadata,
    db.Column('id', db.Integer, primary_key=True),
    db.Column('report_id', db.Integer,
              db.ForeignKey('report.id', name='fk_reportscanassoc_report')),
    db.Column('scan_id', db.Integer,
              db.ForeignKey('scan.id', name='fk_reportscanassoc_scan')))
